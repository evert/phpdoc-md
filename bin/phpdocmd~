#!/usr/bin/env php
<?php

/*

changes made by Rainer StÃ¶tter

- xml contents as property $m_xml
- additional command line parameter --sort
- additional command line parameter --level component
- additional command line parameter --level class
- additional command line parameter --protected-off
- additional command line parameter --private-off
- additional command line parameter --public-off

*/



/**
 * Possible Composer autoload paths.
 */
$paths = array(
    __DIR__ . '/../vendor/autoload.php',
    __DIR__ . '/../../../autoload.php',
);

foreach ($paths as $path) {
    if (file_exists($path)) {
        include $path;
        break;
    }
}

/**
 * Time to parse arguments...
 */

$arguments = $argv;
array_shift($arguments);

/**
 * Let's re-index the arguments array.
 */
$arguments = array_values($arguments);

$positional = array();

$named = array(
    'lt' => '%c.md',
    'index' => 'ApiIndex.md',
    'sort' => false,
    'level' => 'class',
    'protected-off' => false,
    'private-off' => false,
    'public-off' => false,
    'sort-index' => false,
    'sort-see' => false
);

for ($i = 0; $i < count($arguments); $i++) {

    if (substr($arguments[$i], 0, 2) === '--') {

	$arg = substr( $arguments[ $i ], 2 );
	if ( $arg == 'sort-index' ) {
	    $named[ $arg ] = true;
	} elseif ( $arg == 'sort-see' ) {
	    $named[ $arg ] = true;
	} elseif ( $arg == 'protected-off' ) {
	    $named[ $arg ] = false;
	} elseif ( $arg == 'private-off' ) {
	    $named[ $arg ] = false;
	} elseif ( $arg == 'public-off' ) {
	    $named[ $arg ] = false;
	} else {
	    $named[ $arg ] = $arguments[$i + 1];
	    $i++;
	}
    } else {
        $positional[] = $arguments[$i];
    }
}



if (count($positional) < 1) {
    include(__DIR__ . '/../src/usage.inc.php');
    die();

}

$input = $positional[0];

$outputDir = '.';

if (isset($positional[1])) {
    $outputDir = $positional[1];
}

$parser = new PHPDocMD\Parser(
    $input,
    $named['sort-index'],
    $named['sort-see'],
    $named['protected-off'],
    $named['private-off'],
    $named['public-off']
);

echo "\n Parsing structure.xml\n";

$classDefinitions = $parser->run();

$templateDir = dirname(__DIR__) . '/templates/';

$generator = new PHPDocMD\Generator(
    $classDefinitions,
    $outputDir,
    $templateDir,
    $named['lt'],
    $named['index'],
    $named['sort-index'],
    $named['level']
);

echo "\n Generating pages\n";

$generator->run();

echo "\n Complete\n";
